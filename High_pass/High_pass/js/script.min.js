"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e11) { throw _e11; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e12) { didErr = true; err = _e12; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function init() {
  var e = new ymaps.Map("map", {
    center: [55.758456, 37.626942],
    zoom: 13,
    controls: []
  }),
      s = new ymaps.Placemark([55.769535, 37.639985], {}, {
    iconLayout: "default#image",
    iconImageHref: "../resources/map.svg",
    iconImageSize: [12, 12]
  });
  e.geoObjects.add(s), s.events.add("click", function () {
    document.querySelector(".adress").classList.add("open");
  });
}

ymaps.ready(init);

var _ = Object.defineProperty,
    w = Object.getOwnPropertySymbols,
    X = Object.prototype.hasOwnProperty,
    Z = Object.prototype.propertyIsEnumerable,
    E = function E(e, s, t) {
  return s in e ? _(e, s, {
    enumerable: !0,
    configurable: !0,
    writable: !0,
    value: t
  }) : e[s] = t;
},
    L = function L(e, s) {
  for (var t in s || (s = {})) {
    X.call(s, t) && E(e, t, s[t]);
  }

  if (w) {
    var _iterator = _createForOfIteratorHelper(w(s)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var t = _step.value;
        Z.call(s, t) && E(e, t, s[t]);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return e;
},
    u = function u(e, s, t) {
  return E(e, "symbol" != _typeof(s) ? s + "" : s, t), t;
};

!function (e, s) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = s() : "function" == typeof define && define.amd ? define(s) : (e = "undefined" != typeof globalThis ? globalThis : e || self).JustValidate = s();
}(void 0, function () {
  "use strict";

  var e = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
      s = /^[0-9]+$/,
      t = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/,
      i = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
  var l, r, o, a;
  (r = l || (l = {})).Required = "required", r.Email = "email", r.MinLength = "minLength", r.MaxLength = "maxLength", r.Password = "password", r.Number = "number", r.MaxNumber = "maxNumber", r.MinNumber = "minNumber", r.StrongPassword = "strongPassword", r.CustomRegexp = "customRegexp", r.MinFilesCount = "minFilesCount", r.MaxFilesCount = "maxFilesCount", r.Files = "files", function (e) {
    e.Required = "required";
  }(o || (o = {})), function (e) {
    e.Label = "label", e.LabelArrow = "labelArrow";
  }(a || (a = {}));

  var n = function n(e) {
    return !!e && "function" == typeof e.then;
  },
      d = {
    errorFieldStyle: {
      color: "#b81111",
      border: "1px solid #B81111"
    },
    errorFieldCssClass: "just-validate-error-field",
    successFieldCssClass: "just-validate-success-field",
    errorLabelStyle: {
      color: "#b81111"
    },
    errorLabelCssClass: "just-validate-error-label",
    successLabelCssClass: "just-validate-success-label",
    focusInvalidField: !0,
    lockForm: !0,
    testingMode: !1
  };

  return /*#__PURE__*/function () {
    function _class(e, s, t) {
      var _this = this;

      _classCallCheck(this, _class);

      u(this, "form", null), u(this, "fields", {}), u(this, "groupFields", {}), u(this, "errors", {}), u(this, "isValid", !1), u(this, "isSubmitted", !1), u(this, "globalConfig", d), u(this, "errorLabels", []), u(this, "successLabels", []), u(this, "eventListeners", []), u(this, "dictLocale", []), u(this, "currentLocale"), u(this, "customStyleTags", {}), u(this, "onSuccessCallback"), u(this, "onFailCallback"), u(this, "tooltips", []), u(this, "lastScrollPosition"), u(this, "isScrollTick"), u(this, "refreshAllTooltips", function () {
        _this.tooltips.forEach(function (e) {
          e.refresh();
        });
      }), u(this, "handleDocumentScroll", function () {
        _this.lastScrollPosition = window.scrollY, _this.isScrollTick || (window.requestAnimationFrame(function () {
          _this.refreshAllTooltips(), _this.isScrollTick = !1;
        }), _this.isScrollTick = !0);
      }), u(this, "formSubmitHandler", function (e) {
        e.preventDefault(), _this.isSubmitted = !0, _this.globalConfig.lockForm && _this.lockForm(), _this.validate()["finally"](function () {
          var s, t;
          _this.globalConfig.lockForm && _this.unlockForm(), _this.isValid ? null == (s = _this.onSuccessCallback) || s.call(_this, e) : null == (t = _this.onFailCallback) || t.call(_this, _this.fields);
        });
      }), u(this, "handleFieldChange", function (e) {
        var s, t;

        for (var _i in _this.fields) {
          var _l = _this.fields[_i];

          if (_l.elem === e) {
            s = _l, t = _i;
            break;
          }
        }

        !s || !t || _this.validateField(t, s, !0);
      }), u(this, "handleGroupChange", function (e) {
        var s, t;

        for (var _i2 in _this.groupFields) {
          var _l2 = _this.groupFields[_i2];

          if (_l2.elems.find(function (s) {
            return s === e;
          })) {
            s = _l2, t = _i2;
            break;
          }
        }

        !s || !t || _this.validateGroup(t, s);
      }), u(this, "handlerChange", function (e) {
        !e.target || (_this.handleFieldChange(e.target), _this.handleGroupChange(e.target), _this.renderErrors());
      }), this.initialize(e, s, t);
    }

    _createClass(_class, [{
      key: "initialize",
      value: function initialize(e, s, t) {
        if (this.form = null, this.errors = {}, this.isValid = !1, this.isSubmitted = !1, this.globalConfig = d, this.errorLabels = [], this.eventListeners = [], this.customStyleTags = {}, this.tooltips = [], "string" == typeof e) {
          var _s = document.querySelector(e);

          if (!_s) throw Error("Form with ".concat(e, " selector not found! Please check the form selector"));
          this.setForm(_s);
        } else {
          if (!(e instanceof HTMLFormElement)) throw Error("Form selector is not valid. Please specify a string selector or a DOM element.");
          this.setForm(e);
        }

        if (this.globalConfig = L(L({}, d), s), t && (this.dictLocale = t), this.isTooltip()) {
          var _e = document.createElement("style");

          _e.textContent = ".just-validate-error-label[data-tooltip=true]{position:fixed;padding:4px 8px;background:#423f3f;color:#fff;white-space:nowrap;z-index:10;border-radius:4px;transform:translateY(-5px)}.just-validate-error-label[data-tooltip=true]:before{content:'';width:0;height:0;border-left:solid 5px transparent;border-right:solid 5px transparent;border-bottom:solid 5px #423f3f;position:absolute;z-index:3;display:block;bottom:-5px;transform:rotate(180deg);left:calc(50% - 5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]{transform:translateX(-5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]:before{right:-7px;bottom:auto;left:auto;top:calc(50% - 2px);transform:rotate(90deg)}.just-validate-error-label[data-tooltip=true][data-direction=right]{transform:translateX(5px)}.just-validate-error-label[data-tooltip=true][data-direction=right]:before{right:auto;bottom:auto;left:-7px;top:calc(50% - 2px);transform:rotate(-90deg)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]{transform:translateY(5px)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]:before{right:auto;bottom:auto;left:calc(50% - 5px);top:-5px;transform:rotate(0)}", this.customStyleTags[a.Label] = document.head.appendChild(_e), this.addListener("scroll", document, this.handleDocumentScroll);
        }
      }
    }, {
      key: "getLocalisedString",
      value: function getLocalisedString(e) {
        var s;
        return this.currentLocale && this.dictLocale.length && (null == (s = this.dictLocale.find(function (s) {
          return s.key === e;
        })) ? void 0 : s.dict[this.currentLocale]) || e;
      }
    }, {
      key: "getFieldErrorMessage",
      value: function getFieldErrorMessage(e, s) {
        var t = "function" == typeof e.errorMessage ? e.errorMessage(this.getElemValue(s), this.fields) : e.errorMessage;
        return this.getLocalisedString(t) || function (e, s) {
          switch (e) {
            case l.Required:
              return "The field is required";

            case l.Email:
              return "Email has invalid format";

            case l.MaxLength:
              return "The field must contain a maximum of :value characters".replace(":value", String(s));

            case l.MinLength:
              return "The field must contain a minimum of :value characters".replace(":value", String(s));

            case l.Password:
              return "Password must contain minimum eight characters, at least one letter and one number";

            case l.Number:
              return "Value should be a number";

            case l.StrongPassword:
              return "Password should contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character";

            case l.MaxNumber:
              return "Number should be less or equal than :value".replace(":value", String(s));

            case l.MinNumber:
              return "Number should be more or equal than :value".replace(":value", String(s));

            case l.MinFilesCount:
              return "Files count should be more or equal than :value".replace(":value", String(s));

            case l.MaxFilesCount:
              return "Files count should be less or equal than :value".replace(":value", String(s));

            case l.Files:
              return "Uploaded files have one or several invalid properties (extension/size/type etc)";

            default:
              return "Value is incorrect";
          }
        }(e.rule, e.value);
      }
    }, {
      key: "getFieldSuccessMessage",
      value: function getFieldSuccessMessage(e, s) {
        var t = "function" == typeof e ? e(this.getElemValue(s), this.fields) : e;
        return this.getLocalisedString(t);
      }
    }, {
      key: "getGroupErrorMessage",
      value: function getGroupErrorMessage(e) {
        return this.getLocalisedString(e.errorMessage) || function (e) {
          return e === o.Required ? "The field is required" : "Group is incorrect";
        }(e.rule);
      }
    }, {
      key: "getGroupSuccessMessage",
      value: function getGroupSuccessMessage(e) {
        return this.getLocalisedString(e.successMessage);
      }
    }, {
      key: "setFieldInvalid",
      value: function setFieldInvalid(e, s) {
        this.fields[e].isValid = !1, this.fields[e].errorMessage = this.getFieldErrorMessage(s, this.fields[e].elem);
      }
    }, {
      key: "setFieldValid",
      value: function setFieldValid(e, s) {
        this.fields[e].isValid = !0, void 0 !== s && (this.fields[e].successMessage = this.getFieldSuccessMessage(s, this.fields[e].elem));
      }
    }, {
      key: "setGroupInvalid",
      value: function setGroupInvalid(e, s) {
        this.groupFields[e].isValid = !1, this.groupFields[e].errorMessage = this.getGroupErrorMessage(s);
      }
    }, {
      key: "setGroupValid",
      value: function setGroupValid(e, s) {
        this.groupFields[e].isValid = !0, this.groupFields[e].successMessage = this.getGroupSuccessMessage(s);
      }
    }, {
      key: "getElemValue",
      value: function getElemValue(e) {
        switch (e.type) {
          case "checkbox":
            return e.checked;

          case "file":
            return e.files;

          default:
            return e.value;
        }
      }
    }, {
      key: "validateGroupRule",
      value: function validateGroupRule(e, s, t, i) {
        if (i.rule === o.Required) ("radio" === s || "checkbox" === s) && (t.every(function (e) {
          return !e.checked;
        }) ? this.setGroupInvalid(e, i) : this.setGroupValid(e, i));
      }
    }, {
      key: "validateFieldRule",
      value: function validateFieldRule(r, o, a) {
        var _this2 = this;

        var d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;
        var c = a.value,
            u = this.getElemValue(o);
        if (a.plugin) a.plugin(u, this.fields) || this.setFieldInvalid(r, a);else switch (a.rule) {
          case l.Required:
            (function (e) {
              var s = e;
              return "string" == typeof e && (s = e.trim()), !s;
            })(u) && this.setFieldInvalid(r, a);
            break;

          case l.Email:
            if ("string" != typeof u) {
              this.setFieldInvalid(r, a);
              break;
            }

            (function (s) {
              return e.test(s);
            })(u) || this.setFieldInvalid(r, a);
            break;

          case l.MaxLength:
            if (void 0 === c) {
              console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(r, a);
              break;
            }

            if ("number" != typeof c) {
              console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] should be a number. The field will be always invalid.")), this.setFieldInvalid(r, a);
              break;
            }

            if ("string" != typeof u) {
              this.setFieldInvalid(r, a);
              break;
            }

            if ("" === u) break;
            (function (e, s) {
              return e.length > s;
            })(u, c) && this.setFieldInvalid(r, a);
            break;

          case l.MinLength:
            if (void 0 === c) {
              console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(r, a);
              break;
            }

            if ("number" != typeof c) {
              console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] should be a number. The field will be always invalid.")), this.setFieldInvalid(r, a);
              break;
            }

            if ("string" != typeof u) {
              this.setFieldInvalid(r, a);
              break;
            }

            if ("" === u) break;
            (function (e, s) {
              return e.length < s;
            })(u, c) && this.setFieldInvalid(r, a);
            break;

          case l.Password:
            if ("string" != typeof u) {
              this.setFieldInvalid(r, a);
              break;
            }

            if ("" === u) break;
            (function (e) {
              return t.test(e);
            })(u) || this.setFieldInvalid(r, a);
            break;

          case l.StrongPassword:
            if ("string" != typeof u) {
              this.setFieldInvalid(r, a);
              break;
            }

            if ("" === u) break;
            (function (e) {
              return i.test(e);
            })(u) || this.setFieldInvalid(r, a);
            break;

          case l.Number:
            if ("string" != typeof u) {
              this.setFieldInvalid(r, a);
              break;
            }

            if ("" === u) break;
            (function (e) {
              return s.test(e);
            })(u) || this.setFieldInvalid(r, a);
            break;

          case l.MaxNumber:
            {
              if (void 0 === c) {
                console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(r, a);
                break;
              }

              if ("number" != typeof c) {
                console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(r, a);
                break;
              }

              if ("string" != typeof u) {
                this.setFieldInvalid(r, a);
                break;
              }

              if ("" === u) break;

              var _e2 = +u;

              (Number.isNaN(_e2) || function (e, s) {
                return e > s;
              }(_e2, c)) && this.setFieldInvalid(r, a);
              break;
            }

          case l.MinNumber:
            {
              if (void 0 === c) {
                console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(r, a);
                break;
              }

              if ("number" != typeof c) {
                console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(r, a);
                break;
              }

              if ("string" != typeof u) {
                this.setFieldInvalid(r, a);
                break;
              }

              if ("" === u) break;

              var _e3 = +u;

              (Number.isNaN(_e3) || function (e, s) {
                return e < s;
              }(_e3, c)) && this.setFieldInvalid(r, a);
              break;
            }

          case l.CustomRegexp:
            {
              if (void 0 === c) return console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field is not defined. This field will be always invalid.")), void this.setFieldInvalid(r, a);

              var _e4;

              try {
                _e4 = new RegExp(c);
              } catch (_unused) {
                console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] should be a valid regexp. This field will be always invalid.")), this.setFieldInvalid(r, a);
                break;
              }

              var _s2 = String(u);

              "" !== _s2 && !_e4.test(_s2) && this.setFieldInvalid(r, a);
              break;
            }

          case l.MinFilesCount:
            if (void 0 === c) {
              console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field is not defined. This field will be always invalid.")), this.setFieldInvalid(r, a);
              break;
            }

            if ("number" != typeof c) {
              console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(r, a);
              break;
            }

            if (Number.isFinite(null == u ? void 0 : u.length) && u.length < c) {
              this.setFieldInvalid(r, a);
              break;
            }

            break;

          case l.MaxFilesCount:
            if (void 0 === c) {
              console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field is not defined. This field will be always invalid.")), this.setFieldInvalid(r, a);
              break;
            }

            if ("number" != typeof c) {
              console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(r, a);
              break;
            }

            if (Number.isFinite(null == u ? void 0 : u.length) && u.length > c) {
              this.setFieldInvalid(r, a);
              break;
            }

            break;

          case l.Files:
            {
              if (void 0 === c) return console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field is not defined. This field will be always invalid.")), void this.setFieldInvalid(r, a);
              if ("object" != _typeof(c)) return console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field should be an object. This field will be always invalid.")), void this.setFieldInvalid(r, a);
              var _e5 = c.files;
              if ("object" != _typeof(_e5)) return console.error("Value for ".concat(a.rule, " rule for [").concat(r, "] field should be an object with files array. This field will be always invalid.")), void this.setFieldInvalid(r, a);

              var _s3 = function _s3(e, s) {
                var t = Number.isFinite(s.minSize) && e.size < s.minSize,
                    i = Number.isFinite(s.maxSize) && e.size > s.maxSize,
                    l = Array.isArray(s.names) && !s.names.includes(e.name),
                    r = Array.isArray(s.extensions) && !s.extensions.includes(e.name.split(".")[e.name.split(".").length - 1]),
                    o = Array.isArray(s.types) && !s.types.includes(e.type);
                return t || i || l || r || o;
              };

              if ("object" == _typeof(u) && null !== u) for (var _t = 0, _i3 = u.length; _t < _i3; ++_t) {
                var _i4 = u.item(_t);

                if (!_i4) {
                  this.setFieldInvalid(r, a);
                  break;
                }

                if (_s3(_i4, _e5)) {
                  this.setFieldInvalid(r, a);
                  break;
                }
              }
              break;
            }

          default:
            {
              if ("function" != typeof a.validator) return console.error("Validator for custom rule for [".concat(r, "] field should be a function. This field will be always invalid.")), void this.setFieldInvalid(r, a);

              var _e6 = a.validator(u, this.fields);

              if ("boolean" != typeof _e6 && "function" != typeof _e6 && console.error("Validator return value for [".concat(r, "] field should be boolean or function. It will be cast to boolean.")), "function" == typeof _e6) {
                if (!d) {
                  this.fields[r].asyncCheckPending = !1;

                  var _s4 = _e6();

                  return n(_s4) ? _s4.then(function (e) {
                    e || _this2.setFieldInvalid(r, a);
                  })["catch"](function () {
                    _this2.setFieldInvalid(r, a);
                  }) : (console.error("Validator function for custom rule for [".concat(r, "] field should return a Promise. This field will be always invalid.")), void this.setFieldInvalid(r, a));
                }

                this.fields[r].asyncCheckPending = !0;
              }

              _e6 || this.setFieldInvalid(r, a);
            }
        }
      }
    }, {
      key: "validateField",
      value: function validateField(e, s) {
        var _this3 = this;

        var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
        var i;
        s.isValid = !0;
        var l = [];
        return _toConsumableArray(s.rules).reverse().forEach(function (i) {
          var r = _this3.validateFieldRule(e, s.elem, i, t);

          n(r) && l.push(r);
        }), s.isValid && this.setFieldValid(e, null == (i = s.config) ? void 0 : i.successMessage), Promise.allSettled(l);
      }
    }, {
      key: "validateGroup",
      value: function validateGroup(e, s) {
        var _this4 = this;

        var t = [];
        return _toConsumableArray(s.rules).reverse().forEach(function (i) {
          var l = _this4.validateGroupRule(e, s.type, s.elems, i);

          n(l) && t.push(l);
        }), Promise.allSettled(t);
      }
    }, {
      key: "focusInvalidField",
      value: function focusInvalidField() {
        var _this5 = this;

        var _loop = function _loop(_e7) {
          var s = _this5.fields[_e7];

          if (!s.isValid) {
            setTimeout(function () {
              return s.elem.focus();
            }, 0);
            return "break";
          }
        };

        for (var _e7 in this.fields) {
          var _ret = _loop(_e7);

          if (_ret === "break") break;
        }
      }
    }, {
      key: "afterSubmitValidation",
      value: function afterSubmitValidation() {
        this.renderErrors(), this.globalConfig.focusInvalidField && this.focusInvalidField();
      }
    }, {
      key: "validate",
      value: function validate() {
        var _this6 = this;

        return new Promise(function (e) {
          var s = [];
          Object.keys(_this6.fields).forEach(function (e) {
            var t = _this6.fields[e],
                i = _this6.validateField(e, t);

            n(i) && s.push(i);
          }), Object.keys(_this6.groupFields).forEach(function (e) {
            var t = _this6.groupFields[e],
                i = _this6.validateGroup(e, t);

            n(i) && s.push(i);
          }), s.length ? Promise.allSettled(s).then(function () {
            _this6.afterSubmitValidation(), e(!0);
          }) : (_this6.afterSubmitValidation(), e(!1));
        });
      }
    }, {
      key: "setForm",
      value: function setForm(e) {
        this.form = e, this.form.setAttribute("novalidate", "novalidate"), this.removeListener("submit", this.form, this.formSubmitHandler), this.addListener("submit", this.form, this.formSubmitHandler);
      }
    }, {
      key: "addListener",
      value: function addListener(e, s, t) {
        s.addEventListener(e, t), this.eventListeners.push({
          type: e,
          elem: s,
          func: t
        });
      }
    }, {
      key: "removeListener",
      value: function removeListener(e, s, t) {
        s.removeEventListener(e, t), this.eventListeners = this.eventListeners.filter(function (t) {
          return t.type !== e || t.elem !== s;
        });
      }
    }, {
      key: "addField",
      value: function addField(e, s, t) {
        if ("string" != typeof e) throw Error("Field selector is not valid. Please specify a string selector.");
        var i = document.querySelector(e);
        if (!i) throw Error("Field with ".concat(e, " selector not found! Please check the field selector."));
        if (!Array.isArray(s) || !s.length) throw Error("Rules argument for the field [".concat(e, "] should be an array and should contain at least 1 element."));
        return s.forEach(function (s) {
          if (!("rule" in s || "validator" in s || "plugin" in s)) throw Error("Rules argument for the field [".concat(e, "] must contain at least one rule or validator property."));
          if (!(s.validator || s.plugin || s.rule && Object.values(l).includes(s.rule))) throw Error("Rule should be one of these types: ".concat(Object.values(l).join(", "), ". Provided value: ").concat(s.rule));
        }), this.fields[e] = {
          elem: i,
          rules: s,
          isValid: void 0,
          config: t
        }, this.setListeners(i), this.isSubmitted && this.validate(), this;
      }
    }, {
      key: "removeField",
      value: function removeField(e) {
        if ("string" != typeof e) throw Error("Field selector is not valid. Please specify a string selector.");
        if (!this.fields[e]) return console.error("Field not found. Check the field selector."), this;
        var s = this.getListenerType(this.fields[e].elem.type);
        return this.removeListener(s, this.fields[e].elem, this.handlerChange), this.clearErrors(), delete this.fields[e], this;
      }
    }, {
      key: "removeGroup",
      value: function removeGroup(e) {
        var _this7 = this;

        if ("string" != typeof e) throw Error("Group selector is not valid. Please specify a string selector.");
        return this.groupFields[e] ? (this.groupFields[e].elems.forEach(function (e) {
          var s = _this7.getListenerType(e.type);

          _this7.removeListener(s, e, _this7.handlerChange);
        }), this.clearErrors(), delete this.groupFields[e], this) : (console.error("Group not found. Check the group selector."), this);
      }
    }, {
      key: "addRequiredGroup",
      value: function addRequiredGroup(e, s, t, i) {
        var _this8 = this;

        if ("string" != typeof e) throw Error("Group selector is not valid. Please specify a string selector.");
        var l = document.querySelector(e);
        if (!l) throw Error("Group with ".concat(e, " selector not found! Please check the group selector."));
        var r = l.querySelectorAll("input"),
            a = Array.from(r).every(function (e) {
          return "radio" === e.type;
        }),
            n = Array.from(r).every(function (e) {
          return "checkbox" === e.type;
        });
        if (!a && !n) throw Error("Group should contain either or checkboxes or radio buttons");
        return this.groupFields[e] = {
          rules: [{
            rule: o.Required,
            errorMessage: s,
            successMessage: i
          }],
          groupElem: l,
          elems: Array.from(r),
          type: a ? "radio" : "checkbox",
          isDirty: !1,
          isValid: void 0,
          config: t
        }, r.forEach(function (e) {
          _this8.setListeners(e);
        }), this;
      }
    }, {
      key: "getListenerType",
      value: function getListenerType(e) {
        switch (e) {
          case "checkbox":
          case "select-one":
          case "file":
          case "radio":
            return "change";

          case "date":
            return "input";

          default:
            return "keyup";
        }
      }
    }, {
      key: "setListeners",
      value: function setListeners(e) {
        var s = this.getListenerType(e.type);
        this.removeListener(s, e, this.handlerChange), this.addListener(s, e, this.handlerChange);
      }
    }, {
      key: "clearErrors",
      value: function clearErrors() {
        var _this9 = this;

        var e, s, t, i, l, r;
        this.errorLabels.forEach(function (e) {
          return e.remove();
        }), this.successLabels.forEach(function (e) {
          return e.remove();
        });

        var _loop2 = function _loop2(_l3) {
          var r = _this9.fields[_l3],
              o = (null == (e = r.config) ? void 0 : e.errorFieldStyle) || _this9.globalConfig.errorFieldStyle;
          Object.keys(o).forEach(function (e) {
            r.elem.style[e] = "";
          });
          var a = (null == (s = r.config) ? void 0 : s.successFieldStyle) || _this9.globalConfig.successFieldStyle || {};
          Object.keys(a).forEach(function (e) {
            r.elem.style[e] = "";
          }), r.elem.classList.remove((null == (t = r.config) ? void 0 : t.errorFieldCssClass) || _this9.globalConfig.errorFieldCssClass, (null == (i = r.config) ? void 0 : i.successFieldCssClass) || _this9.globalConfig.successFieldCssClass);
        };

        for (var _l3 in this.fields) {
          _loop2(_l3);
        }

        var _loop3 = function _loop3(_e8) {
          var s = _this9.groupFields[_e8],
              t = (null == (l = s.config) ? void 0 : l.errorFieldStyle) || _this9.globalConfig.errorFieldStyle;
          Object.keys(t).forEach(function (e) {
            s.elems.forEach(function (t) {
              var i;
              t.style[e] = "", t.classList.remove((null == (i = s.config) ? void 0 : i.errorFieldCssClass) || _this9.globalConfig.errorFieldCssClass);
            });
          });
          var i = (null == (r = s.config) ? void 0 : r.successFieldStyle) || _this9.globalConfig.successFieldStyle || {};
          Object.keys(i).forEach(function (e) {
            s.elems.forEach(function (t) {
              var i;
              t.style[e] = "", t.classList.remove((null == (i = s.config) ? void 0 : i.successFieldCssClass) || _this9.globalConfig.successFieldCssClass);
            });
          });
        };

        for (var _e8 in this.groupFields) {
          _loop3(_e8);
        }

        this.tooltips = [];
      }
    }, {
      key: "isTooltip",
      value: function isTooltip() {
        return !!this.globalConfig.tooltip;
      }
    }, {
      key: "lockForm",
      value: function lockForm() {
        var e = this.form.querySelectorAll("input, textarea, button, select");

        for (var _s5 = 0, _t2 = e.length; _s5 < _t2; ++_s5) {
          e[_s5].setAttribute("disabled", "disabled"), e[_s5].style.pointerEvents = "none", e[_s5].style.webkitFilter = "grayscale(100%)", e[_s5].style.filter = "grayscale(100%)";
        }
      }
    }, {
      key: "unlockForm",
      value: function unlockForm() {
        var e = this.form.querySelectorAll("input, textarea, button, select");

        for (var _s6 = 0, _t3 = e.length; _s6 < _t3; ++_s6) {
          e[_s6].removeAttribute("disabled"), e[_s6].style.pointerEvents = "", e[_s6].style.webkitFilter = "", e[_s6].style.filter = "";
        }
      }
    }, {
      key: "renderTooltip",
      value: function renderTooltip(e, s, t) {
        var _this10 = this;

        var i;

        var _e$getBoundingClientR = e.getBoundingClientRect(),
            l = _e$getBoundingClientR.top,
            r = _e$getBoundingClientR.left,
            o = _e$getBoundingClientR.width,
            a = _e$getBoundingClientR.height,
            n = s.getBoundingClientRect(),
            d = t || (null == (i = this.globalConfig.tooltip) ? void 0 : i.position);

        switch (d) {
          case "left":
            s.style.top = l + a / 2 - n.height / 2 + "px", s.style.left = r - n.width - 5 + "px";
            break;

          case "top":
            s.style.top = l - n.height - 5 + "px", s.style.left = r + o / 2 - n.width / 2 + "px";
            break;

          case "right":
            s.style.top = l + a / 2 - n.height / 2 + "px", s.style.left = "".concat(r + o + 5, "px");
            break;

          case "bottom":
            s.style.top = "".concat(l + a + 5, "px"), s.style.left = r + o / 2 - n.width / 2 + "px";
        }

        return s.dataset.direction = d, {
          refresh: function refresh() {
            _this10.renderTooltip(e, s, t);
          }
        };
      }
    }, {
      key: "createErrorLabelElem",
      value: function createErrorLabelElem(e, s, t) {
        var i = document.createElement("div");
        i.innerHTML = s;
        var l = this.isTooltip() ? null == t ? void 0 : t.errorLabelStyle : (null == t ? void 0 : t.errorLabelStyle) || this.globalConfig.errorLabelStyle;
        return Object.assign(i.style, l), i.classList.add((null == t ? void 0 : t.errorLabelCssClass) || this.globalConfig.errorLabelCssClass, "just-validate-error-label"), this.isTooltip() && (i.dataset.tooltip = "true"), this.globalConfig.testingMode && (i.dataset.testId = "error-label-".concat(e)), this.errorLabels.push(i), i;
      }
    }, {
      key: "createSuccessLabelElem",
      value: function createSuccessLabelElem(e, s, t) {
        if (void 0 === s) return null;
        var i = document.createElement("div");
        i.innerHTML = s;
        var l = (null == t ? void 0 : t.successLabelStyle) || this.globalConfig.successLabelStyle;
        return Object.assign(i.style, l), i.classList.add((null == t ? void 0 : t.successLabelCssClass) || this.globalConfig.successLabelCssClass, "just-validate-success-label"), this.globalConfig.testingMode && (i.dataset.testId = "success-label-".concat(e)), this.successLabels.push(i), i;
      }
    }, {
      key: "renderFieldLabel",
      value: function renderFieldLabel(e, s) {
        var t, i, l, r, o, a, n;

        if ("checkbox" === e.type || "radio" === e.type) {
          var _n = document.querySelector("label[for=\"".concat(e.getAttribute("id"), "\"]"));

          "label" === (null == (i = null == (t = e.parentElement) ? void 0 : t.tagName) ? void 0 : i.toLowerCase()) ? null == (r = null == (l = e.parentElement) ? void 0 : l.parentElement) || r.appendChild(s) : _n ? null == (o = _n.parentElement) || o.appendChild(s) : null == (a = e.parentElement) || a.appendChild(s);
        } else null == (n = e.parentElement) || n.appendChild(s);
      }
    }, {
      key: "renderErrors",
      value: function renderErrors() {
        var _this11 = this;

        var e, s, t, i, l, r;

        if (this.isSubmitted) {
          this.clearErrors(), this.isValid = !0;

          var _loop4 = function _loop4(_t4) {
            var i = _this11.groupFields[_t4];

            if (i.isValid) {
              i.elems.forEach(function (e) {
                var s, t;
                Object.assign(e.style, (null == (s = i.config) ? void 0 : s.successFieldStyle) || _this11.globalConfig.successFieldStyle), e.classList.add((null == (t = i.config) ? void 0 : t.successFieldCssClass) || _this11.globalConfig.successFieldCssClass);
              });

              var _e10 = _this11.createSuccessLabelElem(_t4, i.successMessage, i.config);

              _e10 && i.groupElem.appendChild(_e10);
              return "continue";
            }

            _this11.isValid = !1, i.elems.forEach(function (e) {
              var s, t;
              Object.assign(e.style, (null == (s = i.config) ? void 0 : s.errorFieldStyle) || _this11.globalConfig.errorFieldStyle), e.classList.add((null == (t = i.config) ? void 0 : t.errorFieldCssClass) || _this11.globalConfig.errorFieldCssClass);
            });

            var l = _this11.createErrorLabelElem(_t4, i.errorMessage, i.config);

            i.groupElem.appendChild(l), _this11.isTooltip() && _this11.tooltips.push(_this11.renderTooltip(i.groupElem, l, null == (s = null == (e = i.config) ? void 0 : e.tooltip) ? void 0 : s.position));
          };

          for (var _t4 in this.groupFields) {
            var _ret2 = _loop4(_t4);

            if (_ret2 === "continue") continue;
          }

          for (var _e9 in this.fields) {
            var _s7 = this.fields[_e9];

            if (_s7.isValid) {
              if (!_s7.asyncCheckPending) {
                var _i5 = this.createSuccessLabelElem(_e9, _s7.successMessage, _s7.config);

                _i5 && this.renderFieldLabel(_s7.elem, _i5), _s7.elem.classList.add((null == (t = _s7.config) ? void 0 : t.successFieldCssClass) || this.globalConfig.successFieldCssClass);
              }

              continue;
            }

            this.isValid = !1, _s7.elem.classList.add((null == (i = _s7.config) ? void 0 : i.errorFieldCssClass) || this.globalConfig.errorFieldCssClass);

            var _o = this.createErrorLabelElem(_e9, _s7.errorMessage, _s7.config);

            this.renderFieldLabel(_s7.elem, _o), this.isTooltip() && this.tooltips.push(this.renderTooltip(_s7.elem, _o, null == (r = null == (l = _s7.config) ? void 0 : l.tooltip) ? void 0 : r.position));
          }
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _this12 = this;

        this.eventListeners.forEach(function (e) {
          _this12.removeListener(e.type, e.elem, e.func);
        }), Object.keys(this.customStyleTags).forEach(function (e) {
          _this12.customStyleTags[e].remove();
        }), this.clearErrors(), this.globalConfig.lockForm && this.unlockForm();
      }
    }, {
      key: "refresh",
      value: function refresh() {
        var _this13 = this;

        this.destroy(), this.form ? (this.initialize(this.form, this.globalConfig), Object.keys(this.fields).forEach(function (e) {
          _this13.addField(e, _toConsumableArray(_this13.fields[e].rules), _this13.fields[e].config);
        })) : console.error("Cannot initialize the library! Form is not defined");
      }
    }, {
      key: "setCurrentLocale",
      value: function setCurrentLocale(e) {
        "string" == typeof e || void 0 === e ? (this.currentLocale = e, this.isSubmitted && this.validate()) : console.error("Current locale should be a string");
      }
    }, {
      key: "onSuccess",
      value: function onSuccess(e) {
        return this.onSuccessCallback = e, this;
      }
    }, {
      key: "onFail",
      value: function onFail(e) {
        return this.onFailCallback = e, this;
      }
    }]);

    return _class;
  }();
});
var validationAbout = new JustValidate(".about-us__form", {
  errorFieldCssClass: "is-invalid",
  errorLabelStyle: {
    color: "#f06666"
  }
});
validationAbout.addField(".email-input-about", [{
  rule: "required",
  errorMessage: "Введите e-mail"
}, {
  rule: "email",
  errorMessage: "Недопустимый формат"
}]).onSuccess(function (e) {
  var _console;

  console.log("Validation passes and form submitted", e);
  var s = new FormData(e.target);

  (_console = console).log.apply(_console, _toConsumableArray(s));

  var t = new XMLHttpRequest();
  t.onreadystatechange = function () {
    4 === t.readyState && 200 === t.status && console.log("Отправлено");
  }, t.open("POST", "mail.php", !0), t.send(s), e.target.reset();
});
var validationContacts = new JustValidate(".callback__form", {
  errorFieldCssClass: "is-invalid",
  errorLabelStyle: {
    color: "#FF3030"
  }
});
validationContacts.addField(".name-input", [{
  rule: "customRegexp",
  value: /^[a-zA-Zа-яА-Яё]/,
  errorMessage: "Недопустимый формат"
}, {
  rule: "required",
  errorMessage: "Введите ваше имя"
}]).addField(".email-input", [{
  rule: "required",
  errorMessage: "Введите e-mail"
}, {
  rule: "email",
  errorMessage: "Недопустимый формат"
}]).onSuccess(function (e) {
  var _console2;

  console.log("Validation passes and form submitted", e);
  var s = new FormData(e.target);

  (_console2 = console).log.apply(_console2, _toConsumableArray(s));

  var t = new XMLHttpRequest();
  t.onreadystatechange = function () {
    4 === t.readyState && 200 === t.status && console.log("Отправлено");
  }, t.open("POST", "mail.php", !0), t.send(s), e.target.reset();
});
var searchTrigger = document.querySelector(".header__search"),
    searchIcon = document.querySelector(".search__icon"),
    searchInput = document.querySelector(".search__input"),
    searchCloseIcon = document.querySelector(".search__close"),
    burger = document.querySelector(".burger"),
    menu = document.querySelector(".menu"),
    menuLink = document.querySelectorAll(".nav__item"),
    searchForm = document.querySelector(".search"),
    links = document.querySelectorAll('a[href^="#"]'),
    closeAdress = document.querySelector(".adress__close"),
    adress = document.querySelector(".adress"),
    topOffset = 50;
links.forEach(function (e) {
  e.addEventListener("click", function (e) {
    e.preventDefault();
    var s = this.getAttribute("href").slice(1);
    var t = document.getElementById(s).getBoundingClientRect().top - topOffset;
    window.scrollBy({
      top: t,
      behavior: "smooth"
    });
  });
}), closeAdress.addEventListener("click", function () {
  adress.classList.remove("open");
}), searchTrigger.addEventListener("click", function (e) {
  e.preventDefault(), searchOpen();
}), searchCloseIcon.addEventListener("click", function (e) {
  e.preventDefault(), searchClose();
}), searchInput.oninput = function () {
  searchInput.classList.add("write");
};

var searchOpen = function searchOpen() {
  searchTrigger.classList.add("opac0"), searchIcon.classList.add("active"), searchInput.classList.add("active"), searchForm.classList.add("active"), searchCloseIcon.classList.add("active");
},
    searchClose = function searchClose() {
  searchTrigger.classList.remove("opac0"), searchInput.classList.remove("active"), setTimeout(function () {
    searchIcon.classList.remove("active"), searchForm.classList.remove("active"), searchCloseIcon.classList.remove("active");
  }, 300);
};

document.addEventListener("keydown", function (e) {
  27 === e.which && searchClose();
}), window.addEventListener("click", function (e) {
  var s = e.target;
  s.closest(".search") || s.closest(".header__search") || s.closest(".burger") || (searchClose(), menuClose());
}), burger.onclick = function () {
  menuOpen();
};

var menuOpen = function menuOpen() {
  menu.classList.toggle("open"), burger.classList.toggle("open");
},
    menuClose = function menuClose() {
  menu.classList.remove("open"), burger.classList.remove("open");
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
